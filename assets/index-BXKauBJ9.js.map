{"version":3,"file":"index-BXKauBJ9.js","sources":["../../src/main.js"],"sourcesContent":["import * as THREE from 'three';\r\nimport { ARButton } from 'three/addons/webxr/ARButton.js';\r\nimport { GLTFLoader } from 'three/addons/loaders/GLTFLoader.js';\r\n\r\nlet container;\r\nlet camera, scene, renderer;\r\nlet controller;\r\n\r\nlet reticle;\r\n\r\nlet hitTestSource = null;\r\nlet hitTestSourceRequested = false;\r\n\r\nlet model;\r\n\r\nlet loadedFlask, loadedTube, loadedGlassBottle = false;\r\n\r\n// Define button materials and geometry\r\nconst buttonGeometry = new THREE.BoxGeometry(0.3, 0.1, 0.05);\r\nconst buttonMaterials = [\r\n  new THREE.MeshBasicMaterial({ color: 0xff0000 }), // Red\r\n  new THREE.MeshBasicMaterial({ color: 0x00ff00 }), // Green\r\n  new THREE.MeshBasicMaterial({ color: 0x0000ff }), // Blue\r\n];\r\n\r\nconst buttons = [];\r\nconst buttonPositions = [\r\n  { x: -0.5, y: -1.2, z: -2 }, // Left button\r\n  { x: 0, y: -1.2, z: -2 },    // Center button\r\n  { x: 0.5, y: -1.2, z: -2 },  // Right button\r\n];\r\n\r\ninit();\r\n\r\nfunction init() {\r\n\r\n  const loader = new GLTFLoader().setPath('/RAUG-AR-Cahet-Codron/assets/models/');\r\n\r\n  container = document.createElement('div');\r\n  document.body.appendChild(container);\r\n\r\n  scene = new THREE.Scene();\r\n\r\n  camera = new THREE.PerspectiveCamera(70, window.innerWidth / window.innerHeight, 0.01, 20);\r\n\r\n  const light = new THREE.HemisphereLight(0xffffff, 0xbbbbff, 3);\r\n  light.position.set(0.5, 1, 0.25);\r\n  scene.add(light);\r\n\r\n  //\r\n\r\n  renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true });\r\n  renderer.setPixelRatio(window.devicePixelRatio);\r\n  renderer.setSize(window.innerWidth, window.innerHeight);\r\n  renderer.setAnimationLoop(animate);\r\n  renderer.xr.enabled = true;\r\n  container.appendChild(renderer.domElement);\r\n\r\n  //\r\n\r\n  document.body.appendChild(ARButton.createButton(renderer, { requiredFeatures: ['hit-test'] }));\r\n\r\n  //\r\n\r\n  // Raycaster for interaction\r\n  const raycaster = new THREE.Raycaster();\r\n  const pointer = new THREE.Vector2();\r\n\r\n  function onPointerDown(event) {\r\n    // Convert touch/mouse coordinates to normalized device coordinates (-1 to 1)\r\n    pointer.x = (event.clientX / window.innerWidth) * 2 - 1;\r\n    pointer.y = -(event.clientY / window.innerHeight) * 2 + 1;\r\n\r\n    // Cast a ray from the camera\r\n    raycaster.setFromCamera(pointer, camera);\r\n    const intersects = raycaster.intersectObjects(buttons);\r\n\r\n    if (intersects.length > 0) {\r\n      const clickedButton = intersects[0].object;\r\n\r\n      if (clickedButton.material.color.getHex() === 0xff0000) {\r\n        console.log('Red button pressed!');\r\n        console.log(clickedButton.material.color.getHex());\r\n        clickedButton.material.color.set(0xffffff);\r\n        console.log(clickedButton.material.color.getHex())\r\n      } else if (clickedButton.material.color.getHex() === 0x00ff00) {\r\n        console.log('Green button pressed!');\r\n        clickedButton.material.color.set(0x000000);\r\n      } else if (clickedButton.material.color.getHex() === 0x0000ff) {\r\n        console.log('Blue button pressed!');\r\n        clickedButton.material.color.set(0xffff00);\r\n      }\r\n    }\r\n  }\r\n\r\n  // Add buttons to the scene\r\n  buttonPositions.forEach((pos, index) => {\r\n    const button = new THREE.Mesh(buttonGeometry, buttonMaterials[index]);\r\n    // Set the position relative to the camera's initial position\r\n    button.position.set(pos.x, pos.y, -2);\r\n    camera.add(button);\r\n    buttons.push(button);\r\n  });\r\n\r\n  scene.add(camera);\r\n\r\n  function onPointerDown(event) {\r\n    // Convert touch/mouse coordinates to normalized device coordinates (-1 to 1)\r\n    pointer.x = (event.clientX / window.innerWidth) * 2 - 1;\r\n    pointer.y = -(event.clientY / window.innerHeight) * 2 + 1;\r\n\r\n    // Cast a ray from the camera\r\n    raycaster.setFromCamera(pointer, camera);\r\n    const intersects = raycaster.intersectObjects(buttons);\r\n\r\n    if (intersects.length > 0) {\r\n      const clickedButton = intersects[0].object;\r\n\r\n      if (clickedButton.material.color.getHex() === 0xff0000) {\r\n        console.log('Red button pressed!');\r\n      } else if (clickedButton.material.color.getHex() === 0x00ff00) {\r\n        console.log('Green button pressed!');\r\n      } else if (clickedButton.material.color.getHex() === 0x0000ff) {\r\n        console.log('Blue button pressed!');\r\n      }\r\n    }\r\n  }\r\n\r\n  // Add event listener for user input\r\n  window.addEventListener('pointerdown', onPointerDown);\r\n\r\n  //\r\n\r\n  function onSelect() {\r\n\r\n    if (reticle.visible) {\r\n      if (!loadedFlask) {\r\n        // Load the flask\r\n        loader.load('flask.glb', (gltf) => {\r\n          model = gltf.scene;\r\n\r\n          reticle.matrix.decompose(model.position, model.quaternion, model.scale);\r\n\r\n          // Scale the model\r\n          model.scale.x = 0.1;\r\n          model.scale.y = 0.1;\r\n          model.scale.z = 0.1;\r\n\r\n          scene.add(model);\r\n\r\n          loadedFlask = true;\r\n\r\n          model.traverse(function (object) {\r\n            if (object.isMesh) object.castShadow = true;\r\n          });\r\n        });\r\n      }\r\n      else if (!loadedTube) {\r\n        // Load the tube\r\n        loader.load('tube.glb', (gltf) => {\r\n          model = gltf.scene;\r\n\r\n          reticle.matrix.decompose(model.position, model.quaternion, model.scale);\r\n\r\n          // Scale the model\r\n          model.scale.x = 0.1;\r\n          model.scale.y = 0.1;\r\n          model.scale.z = 0.1;\r\n\r\n          scene.add(model);\r\n\r\n          loadedTube = true;\r\n\r\n          model.traverse(function (object) {\r\n            if (object.isMesh) object.castShadow = true;\r\n          });\r\n        });\r\n      }\r\n      else if (!loadedGlassBottle) {\r\n        // Load the glass bottle\r\n        loader.load('glass-bottle.glb', (gltf) => {\r\n          model = gltf.scene;\r\n\r\n          reticle.matrix.decompose(model.position, model.quaternion, model.scale);\r\n\r\n          // Scale the model\r\n          model.scale.x = 0.05;\r\n          model.scale.y = 0.05;\r\n          model.scale.z = 0.05;\r\n\r\n          scene.add(model);\r\n\r\n          loadedGlassBottle = true;\r\n\r\n          model.traverse(function (object) {\r\n            if (object.isMesh) object.castShadow = true;\r\n          });\r\n        });\r\n      }\r\n      else {\r\n        const model = scene.children[4];\r\n\r\n        const duration = 3000;\r\n        const wiggleFrequency = 100;\r\n        const baseScale = 0.1;\r\n        const wiggleAmplitude = 0.01;\r\n        const startTime = performance.now();\r\n\r\n        let lastFrameTime = startTime;\r\n\r\n        function wiggle() {\r\n          const currentTime = performance.now();\r\n          const elapsedTime = currentTime - startTime;\r\n\r\n          if (elapsedTime < duration) {\r\n            if (currentTime - lastFrameTime >= wiggleFrequency) {\r\n              lastFrameTime = currentTime;\r\n              const scaleFactor = baseScale +\r\n                wiggleAmplitude * Math.sin((elapsedTime / 1000) * wiggleFrequency * 2 * Math.PI);\r\n              model.scale.set(scaleFactor, scaleFactor, scaleFactor);\r\n            }\r\n\r\n            requestAnimationFrame(wiggle);\r\n          } else {\r\n            model.scale.set(baseScale, baseScale, baseScale);\r\n          }\r\n        }\r\n\r\n        wiggle();\r\n      }\r\n    }\r\n  }\r\n\r\n  controller = renderer.xr.getController(0);\r\n  controller.addEventListener('select', onSelect);\r\n  scene.add(controller);\r\n\r\n  reticle = new THREE.Mesh(\r\n    new THREE.RingGeometry(0.15, 0.2, 32).rotateX(- Math.PI / 2),\r\n    new THREE.MeshBasicMaterial()\r\n  );\r\n  reticle.matrixAutoUpdate = false;\r\n  reticle.visible = false;\r\n  scene.add(reticle);\r\n\r\n  //\r\n\r\n  window.addEventListener('resize', onWindowResize);\r\n\r\n}\r\n\r\nfunction onWindowResize() {\r\n\r\n  camera.aspect = window.innerWidth / window.innerHeight;\r\n  camera.updateProjectionMatrix();\r\n\r\n  renderer.setSize(window.innerWidth, window.innerHeight);\r\n\r\n}\r\n\r\n//\r\n\r\nfunction animate(timestamp, frame) {\r\n\r\n  if (frame) {\r\n\r\n    const referenceSpace = renderer.xr.getReferenceSpace();\r\n    const session = renderer.xr.getSession();\r\n\r\n    if (hitTestSourceRequested === false) {\r\n\r\n      session.requestReferenceSpace('viewer').then(function (referenceSpace) {\r\n\r\n        session.requestHitTestSource({ space: referenceSpace }).then(function (source) {\r\n\r\n          hitTestSource = source;\r\n\r\n        });\r\n\r\n      });\r\n\r\n      session.addEventListener('end', function () {\r\n\r\n        hitTestSourceRequested = false;\r\n        hitTestSource = null;\r\n\r\n      });\r\n\r\n      hitTestSourceRequested = true;\r\n\r\n    }\r\n\r\n    if (hitTestSource) {\r\n\r\n      const hitTestResults = frame.getHitTestResults(hitTestSource);\r\n\r\n      if (hitTestResults.length) {\r\n\r\n        const hit = hitTestResults[0];\r\n\r\n        reticle.visible = true;\r\n        reticle.matrix.fromArray(hit.getPose(referenceSpace).transform.matrix);\r\n\r\n      } else {\r\n\r\n        reticle.visible = false;\r\n\r\n      }\r\n\r\n    }\r\n\r\n  }\r\n\r\n  renderer.render(scene, camera);\r\n}"],"names":["container","camera","scene","renderer","controller","reticle","hitTestSource","hitTestSourceRequested","model","loadedFlask","loadedTube","loadedGlassBottle","buttonGeometry","THREE.BoxGeometry","buttonMaterials","THREE.MeshBasicMaterial","buttons","buttonPositions","init","loader","GLTFLoader","THREE.Scene","THREE.PerspectiveCamera","light","THREE.HemisphereLight","THREE.WebGLRenderer","animate","ARButton","raycaster","THREE.Raycaster","pointer","THREE.Vector2","pos","index","button","THREE.Mesh","onPointerDown","event","intersects","clickedButton","onSelect","gltf","object","wiggle","currentTime","elapsedTime","startTime","duration","lastFrameTime","wiggleFrequency","scaleFactor","baseScale","wiggleAmplitude","THREE.RingGeometry","onWindowResize","timestamp","frame","referenceSpace","session","source","hitTestResults","hit"],"mappings":"g3BAIA,IAAIA,EACAC,EAAQC,EAAOC,EACfC,EAEAC,EAEAC,EAAgB,KAChBC,EAAyB,GAEzBC,EAEAC,EAAaC,EAAYC,EAAoB,GAGjD,MAAMC,EAAiB,IAAIC,EAAkB,GAAK,GAAK,GAAI,EACrDC,EAAkB,CACtB,IAAIC,EAAwB,CAAE,MAAO,SAAU,EAC/C,IAAIA,EAAwB,CAAE,MAAO,MAAU,EAC/C,IAAIA,EAAwB,CAAE,MAAO,IAAU,CACjD,EAEMC,EAAU,CAAA,EACVC,EAAkB,CACtB,CAAE,EAAG,IAAM,EAAG,KAAM,EAAG,EAAI,EAC3B,CAAE,EAAG,EAAG,EAAG,KAAM,EAAG,EAAI,EACxB,CAAE,EAAG,GAAK,EAAG,KAAM,EAAG,EAAI,CAC5B,EAEAC,IAEA,SAASA,GAAO,CAEd,MAAMC,EAAS,IAAIC,EAAY,EAAC,QAAQ,sCAAsC,EAE9EpB,EAAY,SAAS,cAAc,KAAK,EACxC,SAAS,KAAK,YAAYA,CAAS,EAEnCE,EAAQ,IAAImB,EAEZpB,EAAS,IAAIqB,EAAwB,GAAI,OAAO,WAAa,OAAO,YAAa,IAAM,EAAE,EAEzF,MAAMC,EAAQ,IAAIC,EAAsB,SAAU,SAAU,CAAC,EAC7DD,EAAM,SAAS,IAAI,GAAK,EAAG,GAAI,EAC/BrB,EAAM,IAAIqB,CAAK,EAIfpB,EAAW,IAAIsB,EAAoB,CAAE,UAAW,GAAM,MAAO,EAAI,CAAE,EACnEtB,EAAS,cAAc,OAAO,gBAAgB,EAC9CA,EAAS,QAAQ,OAAO,WAAY,OAAO,WAAW,EACtDA,EAAS,iBAAiBuB,CAAO,EACjCvB,EAAS,GAAG,QAAU,GACtBH,EAAU,YAAYG,EAAS,UAAU,EAIzC,SAAS,KAAK,YAAYwB,EAAS,aAAaxB,EAAU,CAAE,iBAAkB,CAAC,UAAU,CAAC,CAAE,CAAC,EAK7F,MAAMyB,EAAY,IAAIC,EAChBC,EAAU,IAAIC,EA8BpBd,EAAgB,QAAQ,CAACe,EAAKC,IAAU,CACtC,MAAMC,EAAS,IAAIC,EAAWvB,EAAgBE,EAAgBmB,CAAK,CAAC,EAEpEC,EAAO,SAAS,IAAIF,EAAI,EAAGA,EAAI,EAAG,EAAE,EACpC/B,EAAO,IAAIiC,CAAM,EACjBlB,EAAQ,KAAKkB,CAAM,CACvB,CAAG,EAEDhC,EAAM,IAAID,CAAM,EAEhB,SAASmC,EAAcC,EAAO,CAE5BP,EAAQ,EAAKO,EAAM,QAAU,OAAO,WAAc,EAAI,EACtDP,EAAQ,EAAI,EAAEO,EAAM,QAAU,OAAO,aAAe,EAAI,EAGxDT,EAAU,cAAcE,EAAS7B,CAAM,EACvC,MAAMqC,EAAaV,EAAU,iBAAiBZ,CAAO,EAErD,GAAIsB,EAAW,OAAS,EAAG,CACzB,MAAMC,EAAgBD,EAAW,CAAC,EAAE,OAEhCC,EAAc,SAAS,MAAM,OAAM,IAAO,SAC5C,QAAQ,IAAI,qBAAqB,EACxBA,EAAc,SAAS,MAAM,OAAM,IAAO,MACnD,QAAQ,IAAI,uBAAuB,EAC1BA,EAAc,SAAS,MAAM,OAAM,IAAO,KACnD,QAAQ,IAAI,sBAAsB,CAErC,CACF,CAGD,OAAO,iBAAiB,cAAeH,CAAa,EAIpD,SAASI,GAAW,CAElB,GAAInC,EAAQ,QACV,GAAI,CAACI,EAEHU,EAAO,KAAK,YAAcsB,GAAS,CACjCjC,EAAQiC,EAAK,MAEbpC,EAAQ,OAAO,UAAUG,EAAM,SAAUA,EAAM,WAAYA,EAAM,KAAK,EAGtEA,EAAM,MAAM,EAAI,GAChBA,EAAM,MAAM,EAAI,GAChBA,EAAM,MAAM,EAAI,GAEhBN,EAAM,IAAIM,CAAK,EAEfC,EAAc,GAEdD,EAAM,SAAS,SAAUkC,EAAQ,CAC3BA,EAAO,SAAQA,EAAO,WAAa,GACnD,CAAW,CACX,CAAS,UAEM,CAAChC,EAERS,EAAO,KAAK,WAAasB,GAAS,CAChCjC,EAAQiC,EAAK,MAEbpC,EAAQ,OAAO,UAAUG,EAAM,SAAUA,EAAM,WAAYA,EAAM,KAAK,EAGtEA,EAAM,MAAM,EAAI,GAChBA,EAAM,MAAM,EAAI,GAChBA,EAAM,MAAM,EAAI,GAEhBN,EAAM,IAAIM,CAAK,EAEfE,EAAa,GAEbF,EAAM,SAAS,SAAUkC,EAAQ,CAC3BA,EAAO,SAAQA,EAAO,WAAa,GACnD,CAAW,CACX,CAAS,UAEM,CAAC/B,EAERQ,EAAO,KAAK,mBAAqBsB,GAAS,CACxCjC,EAAQiC,EAAK,MAEbpC,EAAQ,OAAO,UAAUG,EAAM,SAAUA,EAAM,WAAYA,EAAM,KAAK,EAGtEA,EAAM,MAAM,EAAI,IAChBA,EAAM,MAAM,EAAI,IAChBA,EAAM,MAAM,EAAI,IAEhBN,EAAM,IAAIM,CAAK,EAEfG,EAAoB,GAEpBH,EAAM,SAAS,SAAUkC,EAAQ,CAC3BA,EAAO,SAAQA,EAAO,WAAa,GACnD,CAAW,CACX,CAAS,MAEE,CAWH,IAASC,EAAT,UAAkB,CAChB,MAAMC,EAAc,YAAY,MAC1BC,EAAcD,EAAcE,EAElC,GAAID,EAAcE,EAAU,CAC1B,GAAIH,EAAcI,GAAiBC,EAAiB,CAClDD,EAAgBJ,EAChB,MAAMM,EAAcC,EAClBC,EAAkB,KAAK,IAAKP,EAAc,IAAQI,EAAkB,EAAI,KAAK,EAAE,EACjFzC,EAAM,MAAM,IAAI0C,EAAaA,EAAaA,CAAW,CACtD,CAED,sBAAsBP,CAAM,CACxC,MACYnC,EAAM,MAAM,IAAI2C,EAAWA,EAAWA,CAAS,CAElD,EA1BD,MAAM3C,EAAQN,EAAM,SAAS,CAAC,EAExB6C,EAAW,IACXE,EAAkB,IAClBE,EAAY,GACZC,EAAkB,IAClBN,EAAY,YAAY,MAE9B,IAAIE,EAAgBF,EAoBpBH,GACD,CAEJ,CAEDvC,EAAaD,EAAS,GAAG,cAAc,CAAC,EACxCC,EAAW,iBAAiB,SAAUoC,CAAQ,EAC9CtC,EAAM,IAAIE,CAAU,EAEpBC,EAAU,IAAI8B,EACZ,IAAIkB,EAAmB,IAAM,GAAK,EAAE,EAAE,QAAQ,CAAE,KAAK,GAAK,CAAC,EAC3D,IAAItC,CACR,EACEV,EAAQ,iBAAmB,GAC3BA,EAAQ,QAAU,GAClBH,EAAM,IAAIG,CAAO,EAIjB,OAAO,iBAAiB,SAAUiD,CAAc,CAElD,CAEA,SAASA,GAAiB,CAExBrD,EAAO,OAAS,OAAO,WAAa,OAAO,YAC3CA,EAAO,uBAAsB,EAE7BE,EAAS,QAAQ,OAAO,WAAY,OAAO,WAAW,CAExD,CAIA,SAASuB,EAAQ6B,EAAWC,EAAO,CAEjC,GAAIA,EAAO,CAET,MAAMC,EAAiBtD,EAAS,GAAG,kBAAiB,EAC9CuD,EAAUvD,EAAS,GAAG,WAAU,EAyBtC,GAvBII,IAA2B,KAE7BmD,EAAQ,sBAAsB,QAAQ,EAAE,KAAK,SAAUD,EAAgB,CAErEC,EAAQ,qBAAqB,CAAE,MAAOD,CAAc,CAAE,EAAE,KAAK,SAAUE,EAAQ,CAE7ErD,EAAgBqD,CAE1B,CAAS,CAET,CAAO,EAEDD,EAAQ,iBAAiB,MAAO,UAAY,CAE1CnD,EAAyB,GACzBD,EAAgB,IAExB,CAAO,EAEDC,EAAyB,IAIvBD,EAAe,CAEjB,MAAMsD,EAAiBJ,EAAM,kBAAkBlD,CAAa,EAE5D,GAAIsD,EAAe,OAAQ,CAEzB,MAAMC,EAAMD,EAAe,CAAC,EAE5BvD,EAAQ,QAAU,GAClBA,EAAQ,OAAO,UAAUwD,EAAI,QAAQJ,CAAc,EAAE,UAAU,MAAM,CAE7E,MAEQpD,EAAQ,QAAU,EAIrB,CAEF,CAEDF,EAAS,OAAOD,EAAOD,CAAM,CAC/B"}