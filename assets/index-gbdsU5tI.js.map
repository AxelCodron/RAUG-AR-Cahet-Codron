{"version":3,"file":"index-gbdsU5tI.js","sources":["../../src/main.js"],"sourcesContent":["import * as THREE from 'three';\r\nimport { ARButton } from 'three/addons/webxr/ARButton.js';\r\nimport { GLTFLoader } from 'three/addons/loaders/GLTFLoader.js';\r\n\r\nlet container;\r\nlet camera, scene, renderer;\r\nlet controller;\r\n\r\nlet reticle;\r\n\r\nlet hitTestSource = null;\r\nlet hitTestSourceRequested = false;\r\n\r\nlet model;\r\n\r\nlet loadedFlask, loadedTube, loadedGlassBottle = false;\r\n\r\nlet currentSelectedModel = null;\r\nlet modelsTouched = {\r\n  flask: false,\r\n  tube: false,\r\n  glassBottle: false\r\n};\r\n\r\ninit();\r\n\r\nfunction init() {\r\n\r\n  const loader = new GLTFLoader().setPath('/RAUG-AR-Cahet-Codron/assets/models/');\r\n\r\n  container = document.createElement('div');\r\n  document.body.appendChild(container);\r\n\r\n  scene = new THREE.Scene();\r\n\r\n  camera = new THREE.PerspectiveCamera(70, window.innerWidth / window.innerHeight, 0.01, 20);\r\n\r\n  const light = new THREE.HemisphereLight(0xffffff, 0xbbbbff, 3);\r\n  light.position.set(0.5, 1, 0.25);\r\n  scene.add(light);\r\n\r\n  //\r\n\r\n  renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true });\r\n  renderer.setPixelRatio(window.devicePixelRatio);\r\n  renderer.setSize(window.innerWidth, window.innerHeight);\r\n  renderer.setAnimationLoop(animate);\r\n  renderer.xr.enabled = true;\r\n  container.appendChild(renderer.domElement);\r\n\r\n  //\r\n\r\n  document.body.appendChild(ARButton.createButton(renderer, { requiredFeatures: ['hit-test'] }));\r\n\r\n  //\r\n\r\n  function onSelect() {\r\n    if (reticle.visible) {\r\n      let currentModel;\r\n      let baseScale;\r\n      let modelType;\r\n\r\n      // Load models as before, but add a unique identifier\r\n      if (!loadedFlask) {\r\n        loader.load('flask.glb', (gltf) => {\r\n          currentModel = gltf.scene;\r\n          baseScale = 0.1;\r\n          modelType = 'flask';\r\n          setupModel(currentModel, baseScale, modelType);\r\n        });\r\n      }\r\n      else if (!loadedTube) {\r\n        loader.load('tube.glb', (gltf) => {\r\n          currentModel = gltf.scene;\r\n          baseScale = 0.1;\r\n          modelType = 'tube';\r\n          setupModel(currentModel, baseScale, modelType);\r\n        });\r\n      }\r\n      else if (!loadedGlassBottle) {\r\n        loader.load('glass-bottle.glb', (gltf) => {\r\n          currentModel = gltf.scene;\r\n          baseScale = 0.04;\r\n          modelType = 'glassBottle';\r\n          setupModel(currentModel, baseScale, modelType);\r\n        });\r\n      }\r\n    }\r\n\r\n    function setupModel(model, baseScale, modelType) {\r\n      // Position the model at the reticle\r\n      reticle.matrix.decompose(model.position, model.quaternion, model.scale);\r\n\r\n      // Scale the model\r\n      model.scale.set(baseScale, baseScale, baseScale);\r\n\r\n      // Add a custom property to identify the model\r\n      model.userData.type = modelType;\r\n\r\n      // Add to scene\r\n      scene.add(model);\r\n\r\n      // Update load flags\r\n      switch (modelType) {\r\n        case 'flask':\r\n          loadedFlask = true;\r\n          break;\r\n        case 'tube':\r\n          loadedTube = true;\r\n          break;\r\n        case 'glassBottle':\r\n          loadedGlassBottle = true;\r\n          break;\r\n      }\r\n\r\n      // Enable shadows\r\n      model.traverse(function (object) {\r\n        if (object.isMesh) object.castShadow = true;\r\n      });\r\n    }\r\n  }\r\n\r\n  // Add this new function to handle touch interactions\r\n  function onTouchMove(event) {\r\n    // Prevent default touch behavior\r\n    event.preventDefault();\r\n\r\n    // Check if we're in AR session\r\n    if (!renderer.xr.isPresenting) return;\r\n\r\n    // Get touch coordinates\r\n    const touch = event.touches[0];\r\n    const touchX = (touch.clientX / window.innerWidth) * 2 - 1;\r\n    const touchY = -(touch.clientY / window.innerHeight) * 2 + 1;\r\n\r\n    // Create raycaster\r\n    const raycaster = new THREE.Raycaster();\r\n    const mouse = new THREE.Vector2(touchX, touchY);\r\n\r\n    // Set up the raycaster from the camera\r\n    raycaster.setFromCamera(mouse, camera);\r\n\r\n    // Check for intersections with models\r\n    const intersects = raycaster.intersectObjects(scene.children, true);\r\n\r\n    if (intersects.length > 0) {\r\n      // Find the top-level model that was touched\r\n      const touchedObject = intersects[0].object.parent;\r\n\r\n      // Check if this is one of our loaded models\r\n      if (touchedObject.userData.type) {\r\n        const modelType = touchedObject.userData.type;\r\n\r\n        // Prevent multiple wiggles for the same model\r\n        if (!modelsTouched[modelType]) {\r\n          console.log('Touched', modelType);\r\n          applyWiggleEffect(touchedObject, touchedObject.scale.x);\r\n          modelsTouched[modelType] = true;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // Wiggle effect remains the same as in the previous example\r\n  function applyWiggleEffect(model, baseScale, duration = 3000, wiggleFrequency = 100, wiggleAmplitude = 0.01) {\r\n    const startTime = performance.now();\r\n    let lastFrameTime = startTime;\r\n\r\n    function wiggle() {\r\n      const currentTime = performance.now();\r\n      const elapsedTime = currentTime - startTime;\r\n\r\n      if (elapsedTime < duration) {\r\n        if (currentTime - lastFrameTime >= wiggleFrequency) {\r\n          lastFrameTime = currentTime;\r\n          const scaleFactor = baseScale +\r\n            wiggleAmplitude * Math.sin((elapsedTime / 1000) * wiggleFrequency * 2 * Math.PI);\r\n          model.scale.set(scaleFactor, scaleFactor, scaleFactor);\r\n        }\r\n\r\n        requestAnimationFrame(wiggle);\r\n      } else {\r\n        model.scale.set(baseScale, baseScale, baseScale);\r\n      }\r\n    }\r\n\r\n    wiggle();\r\n  }\r\n\r\n  // Add touch event listener\r\n  window.addEventListener('touchmove', onTouchMove, { passive: false });\r\n\r\n  controller = renderer.xr.getController(0);\r\n  controller.addEventListener('select', onSelect);\r\n  scene.add(controller);\r\n\r\n  reticle = new THREE.Mesh(\r\n    new THREE.RingGeometry(0.15, 0.2, 32).rotateX(- Math.PI / 2),\r\n    new THREE.MeshBasicMaterial()\r\n  );\r\n  reticle.matrixAutoUpdate = false;\r\n  reticle.visible = false;\r\n  scene.add(reticle);\r\n\r\n  //\r\n\r\n  window.addEventListener('resize', onWindowResize);\r\n\r\n}\r\n\r\nfunction onWindowResize() {\r\n\r\n  camera.aspect = window.innerWidth / window.innerHeight;\r\n  camera.updateProjectionMatrix();\r\n\r\n  renderer.setSize(window.innerWidth, window.innerHeight);\r\n\r\n}\r\n\r\n//\r\n\r\nfunction animate(timestamp, frame) {\r\n\r\n  if (frame) {\r\n\r\n    const referenceSpace = renderer.xr.getReferenceSpace();\r\n    const session = renderer.xr.getSession();\r\n\r\n    if (hitTestSourceRequested === false) {\r\n\r\n      session.requestReferenceSpace('viewer').then(function (referenceSpace) {\r\n\r\n        session.requestHitTestSource({ space: referenceSpace }).then(function (source) {\r\n\r\n          hitTestSource = source;\r\n\r\n        });\r\n\r\n      });\r\n\r\n      session.addEventListener('end', function () {\r\n\r\n        hitTestSourceRequested = false;\r\n        hitTestSource = null;\r\n\r\n      });\r\n\r\n      hitTestSourceRequested = true;\r\n\r\n    }\r\n\r\n    if (hitTestSource) {\r\n\r\n      const hitTestResults = frame.getHitTestResults(hitTestSource);\r\n\r\n      if (hitTestResults.length) {\r\n\r\n        const hit = hitTestResults[0];\r\n\r\n        reticle.visible = true;\r\n        reticle.matrix.fromArray(hit.getPose(referenceSpace).transform.matrix);\r\n\r\n      } else {\r\n\r\n        reticle.visible = false;\r\n\r\n      }\r\n\r\n    }\r\n\r\n  }\r\n\r\n  renderer.render(scene, camera);\r\n}"],"names":["container","camera","scene","renderer","controller","reticle","hitTestSource","hitTestSourceRequested","loadedFlask","loadedTube","loadedGlassBottle","modelsTouched","init","loader","GLTFLoader","THREE.Scene","THREE.PerspectiveCamera","light","THREE.HemisphereLight","THREE.WebGLRenderer","animate","ARButton","onSelect","currentModel","baseScale","modelType","gltf","setupModel","model","object","onTouchMove","event","touch","touchX","touchY","raycaster","THREE.Raycaster","mouse","THREE.Vector2","intersects","touchedObject","applyWiggleEffect","duration","wiggleFrequency","wiggleAmplitude","startTime","lastFrameTime","wiggle","currentTime","elapsedTime","scaleFactor","THREE.Mesh","THREE.RingGeometry","THREE.MeshBasicMaterial","onWindowResize","timestamp","frame","referenceSpace","session","source","hitTestResults","hit"],"mappings":"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"}